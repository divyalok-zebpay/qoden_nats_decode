// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: execution.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderStatus int32

const (
	OrderStatus_Working   OrderStatus = 0
	OrderStatus_Rejected  OrderStatus = 1
	OrderStatus_Cancelled OrderStatus = 2
	OrderStatus_Completed OrderStatus = 3
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "Working",
		1: "Rejected",
		2: "Cancelled",
		3: "Completed",
	}
	OrderStatus_value = map[string]int32{
		"Working":   0,
		"Rejected":  1,
		"Cancelled": 2,
		"Completed": 3,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[0].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[0]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{0}
}

type OrderType int32

const (
	OrderType_Limit      OrderType = 0
	OrderType_Market     OrderType = 1
	OrderType_StopLimit  OrderType = 2
	OrderType_StopMarket OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "Limit",
		1: "Market",
		2: "StopLimit",
		3: "StopMarket",
	}
	OrderType_value = map[string]int32{
		"Limit":      0,
		"Market":     1,
		"StopLimit":  2,
		"StopMarket": 3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{1}
}

type OrderSide int32

const (
	OrderSide_Buy  OrderSide = 0
	OrderSide_Sell OrderSide = 1
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "Buy",
		1: "Sell",
	}
	OrderSide_value = map[string]int32{
		"Buy":  0,
		"Sell": 1,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[2].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[2]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{2}
}

type RejectReason int32

const (
	RejectReason_NoRejection             RejectReason = 0
	RejectReason_InstrumentNotFound      RejectReason = 1
	RejectReason_OrderNotFound           RejectReason = 2
	RejectReason_InvalidOrderType        RejectReason = 3
	RejectReason_InvalidAccount          RejectReason = 4
	RejectReason_InvalidSide             RejectReason = 5
	RejectReason_InvalidAmount           RejectReason = 6
	RejectReason_InvalidLimitPrice       RejectReason = 7
	RejectReason_InvalidQuoteLimit       RejectReason = 8
	RejectReason_InvalidActivationPrice  RejectReason = 9
	RejectReason_InvalidTimeInForce      RejectReason = 10
	RejectReason_MarketHalted            RejectReason = 11
	RejectReason_MarketPaused            RejectReason = 12
	RejectReason_NoCounterOrders         RejectReason = 13
	RejectReason_MissingExpirationTime   RejectReason = 14
	RejectReason_IncorrectExpirationTime RejectReason = 15
	RejectReason_InternalError           RejectReason = 16
	RejectReason_IllegalStatusSwitch     RejectReason = 17
	RejectReason_OrderAlreadyExists      RejectReason = 18
	RejectReason_InstrumentNotReady      RejectReason = 19
	RejectReason_ExternalSystemError     RejectReason = 20
)

// Enum value maps for RejectReason.
var (
	RejectReason_name = map[int32]string{
		0:  "NoRejection",
		1:  "InstrumentNotFound",
		2:  "OrderNotFound",
		3:  "InvalidOrderType",
		4:  "InvalidAccount",
		5:  "InvalidSide",
		6:  "InvalidAmount",
		7:  "InvalidLimitPrice",
		8:  "InvalidQuoteLimit",
		9:  "InvalidActivationPrice",
		10: "InvalidTimeInForce",
		11: "MarketHalted",
		12: "MarketPaused",
		13: "NoCounterOrders",
		14: "MissingExpirationTime",
		15: "IncorrectExpirationTime",
		16: "InternalError",
		17: "IllegalStatusSwitch",
		18: "OrderAlreadyExists",
		19: "InstrumentNotReady",
		20: "ExternalSystemError",
	}
	RejectReason_value = map[string]int32{
		"NoRejection":             0,
		"InstrumentNotFound":      1,
		"OrderNotFound":           2,
		"InvalidOrderType":        3,
		"InvalidAccount":          4,
		"InvalidSide":             5,
		"InvalidAmount":           6,
		"InvalidLimitPrice":       7,
		"InvalidQuoteLimit":       8,
		"InvalidActivationPrice":  9,
		"InvalidTimeInForce":      10,
		"MarketHalted":            11,
		"MarketPaused":            12,
		"NoCounterOrders":         13,
		"MissingExpirationTime":   14,
		"IncorrectExpirationTime": 15,
		"InternalError":           16,
		"IllegalStatusSwitch":     17,
		"OrderAlreadyExists":      18,
		"InstrumentNotReady":      19,
		"ExternalSystemError":     20,
	}
)

func (x RejectReason) Enum() *RejectReason {
	p := new(RejectReason)
	*p = x
	return p
}

func (x RejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[3].Descriptor()
}

func (RejectReason) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[3]
}

func (x RejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RejectReason.Descriptor instead.
func (RejectReason) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{3}
}

type ReportCause int32

const (
	ReportCause_NONE               ReportCause = 0
	ReportCause_NewOrder           ReportCause = 1
	ReportCause_CancelOrder        ReportCause = 2
	ReportCause_MassCancel         ReportCause = 3
	ReportCause_Expiration         ReportCause = 4
	ReportCause_Trigger            ReportCause = 5
	ReportCause_MarketStatusChange ReportCause = 6
)

// Enum value maps for ReportCause.
var (
	ReportCause_name = map[int32]string{
		0: "NONE",
		1: "NewOrder",
		2: "CancelOrder",
		3: "MassCancel",
		4: "Expiration",
		5: "Trigger",
		6: "MarketStatusChange",
	}
	ReportCause_value = map[string]int32{
		"NONE":               0,
		"NewOrder":           1,
		"CancelOrder":        2,
		"MassCancel":         3,
		"Expiration":         4,
		"Trigger":            5,
		"MarketStatusChange": 6,
	}
)

func (x ReportCause) Enum() *ReportCause {
	p := new(ReportCause)
	*p = x
	return p
}

func (x ReportCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportCause) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[4].Descriptor()
}

func (ReportCause) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[4]
}

func (x ReportCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportCause.Descriptor instead.
func (ReportCause) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{4}
}

type TimeInForce int32

const (
	TimeInForce_GoodTillCancel    TimeInForce = 0
	TimeInForce_ImmediateOrCancel TimeInForce = 1
	TimeInForce_FillOrKill        TimeInForce = 2
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "GoodTillCancel",
		1: "ImmediateOrCancel",
		2: "FillOrKill",
	}
	TimeInForce_value = map[string]int32{
		"GoodTillCancel":    0,
		"ImmediateOrCancel": 1,
		"FillOrKill":        2,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[5].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[5]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{5}
}

type CancelReason int32

const (
	CancelReason_NotCancelled        CancelReason = 0
	CancelReason_CancelledByTrader   CancelReason = 1
	CancelReason_CancelledBySystem   CancelReason = 2
	CancelReason_SelfMatchPrevention CancelReason = 3
	CancelReason_OrderTimeInForce    CancelReason = 4
	CancelReason_Liquidation         CancelReason = 100
)

// Enum value maps for CancelReason.
var (
	CancelReason_name = map[int32]string{
		0:   "NotCancelled",
		1:   "CancelledByTrader",
		2:   "CancelledBySystem",
		3:   "SelfMatchPrevention",
		4:   "OrderTimeInForce",
		100: "Liquidation",
	}
	CancelReason_value = map[string]int32{
		"NotCancelled":        0,
		"CancelledByTrader":   1,
		"CancelledBySystem":   2,
		"SelfMatchPrevention": 3,
		"OrderTimeInForce":    4,
		"Liquidation":         100,
	}
)

func (x CancelReason) Enum() *CancelReason {
	p := new(CancelReason)
	*p = x
	return p
}

func (x CancelReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReason) Descriptor() protoreflect.EnumDescriptor {
	return file_execution_proto_enumTypes[6].Descriptor()
}

func (CancelReason) Type() protoreflect.EnumType {
	return &file_execution_proto_enumTypes[6]
}

func (x CancelReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReason.Descriptor instead.
func (CancelReason) EnumDescriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{6}
}

type TradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                int64       `protobuf:"varint,1,opt,name=TradeId,proto3" json:"TradeId,omitempty"`
	Amount                 float32     `protobuf:"fixed32,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	ExecutionPrice         float32     `protobuf:"fixed32,3,opt,name=ExecutionPrice,proto3" json:"ExecutionPrice,omitempty"`
	OrderStatus            OrderStatus `protobuf:"varint,4,opt,name=OrderStatus,proto3,enum=main.OrderStatus" json:"OrderStatus,omitempty"`
	AccountId              int64       `protobuf:"varint,5,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	MatchedOrderExternalId string      `protobuf:"bytes,6,opt,name=MatchedOrderExternalId,proto3" json:"MatchedOrderExternalId,omitempty"`
	MatchedOrderId         int64       `protobuf:"varint,7,opt,name=MatchedOrderId,proto3" json:"MatchedOrderId,omitempty"`
	RemainingAmount        float64     `protobuf:"fixed64,8,opt,name=RemainingAmount,proto3" json:"RemainingAmount,omitempty"`
}

func (x *TradeData) Reset() {
	*x = TradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeData) ProtoMessage() {}

func (x *TradeData) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeData.ProtoReflect.Descriptor instead.
func (*TradeData) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{0}
}

func (x *TradeData) GetTradeId() int64 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *TradeData) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TradeData) GetExecutionPrice() float32 {
	if x != nil {
		return x.ExecutionPrice
	}
	return 0
}

func (x *TradeData) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_Working
}

func (x *TradeData) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeData) GetMatchedOrderExternalId() string {
	if x != nil {
		return x.MatchedOrderExternalId
	}
	return ""
}

func (x *TradeData) GetMatchedOrderId() int64 {
	if x != nil {
		return x.MatchedOrderId
	}
	return 0
}

func (x *TradeData) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin                  string       `protobuf:"bytes,1,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Side                    OrderSide    `protobuf:"varint,2,opt,name=Side,proto3,enum=main.OrderSide" json:"Side,omitempty"`
	RequestedPrice          float32      `protobuf:"fixed32,3,opt,name=RequestedPrice,proto3" json:"RequestedPrice,omitempty"`
	RequestedAmount         float32      `protobuf:"fixed32,4,opt,name=RequestedAmount,proto3" json:"RequestedAmount,omitempty"`
	RemainingAmount         float32      `protobuf:"fixed32,5,opt,name=RemainingAmount,proto3" json:"RemainingAmount,omitempty"`
	ExecutedAt              int64        `protobuf:"varint,6,opt,name=ExecutedAt,proto3" json:"ExecutedAt,omitempty"`
	OrderStatus             OrderStatus  `protobuf:"varint,7,opt,name=OrderStatus,proto3,enum=main.OrderStatus" json:"OrderStatus,omitempty"`
	Trades                  []*TradeData `protobuf:"bytes,8,rep,name=Trades,proto3" json:"Trades,omitempty"`
	OrderType               OrderType    `protobuf:"varint,9,opt,name=OrderType,proto3,enum=main.OrderType" json:"OrderType,omitempty"`
	Version                 int64        `protobuf:"varint,10,opt,name=Version,proto3" json:"Version,omitempty"`
	AccountId               int64        `protobuf:"varint,11,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	RejectReason            RejectReason `protobuf:"varint,12,opt,name=RejectReason,proto3,enum=main.RejectReason" json:"RejectReason,omitempty"`
	ReportCause             ReportCause  `protobuf:"varint,13,opt,name=ReportCause,proto3,enum=main.ReportCause" json:"ReportCause,omitempty"`
	InstructionId           string       `protobuf:"bytes,14,opt,name=InstructionId,proto3" json:"InstructionId,omitempty"`
	ExternalOrderId         string       `protobuf:"bytes,15,opt,name=ExternalOrderId,proto3" json:"ExternalOrderId,omitempty"`
	ExecutionEngineMarketId int32        `protobuf:"varint,16,opt,name=ExecutionEngineMarketId,proto3" json:"ExecutionEngineMarketId,omitempty"`
	OrderId                 int64        `protobuf:"varint,17,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	CancelReason            CancelReason `protobuf:"varint,18,opt,name=CancelReason,proto3,enum=main.CancelReason" json:"CancelReason,omitempty"`
	TxId                    int64        `protobuf:"varint,19,opt,name=TxId,proto3" json:"TxId,omitempty"`
	TimeInForce             TimeInForce  `protobuf:"varint,20,opt,name=TimeInForce,proto3,enum=main.TimeInForce" json:"TimeInForce,omitempty"`
	CancelledBy             string       `protobuf:"bytes,21,opt,name=CancelledBy,proto3" json:"CancelledBy,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_execution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_execution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_execution_proto_rawDescGZIP(), []int{1}
}

func (x *Execution) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Execution) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_Buy
}

func (x *Execution) GetRequestedPrice() float32 {
	if x != nil {
		return x.RequestedPrice
	}
	return 0
}

func (x *Execution) GetRequestedAmount() float32 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *Execution) GetRemainingAmount() float32 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *Execution) GetExecutedAt() int64 {
	if x != nil {
		return x.ExecutedAt
	}
	return 0
}

func (x *Execution) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_Working
}

func (x *Execution) GetTrades() []*TradeData {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *Execution) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_Limit
}

func (x *Execution) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Execution) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Execution) GetRejectReason() RejectReason {
	if x != nil {
		return x.RejectReason
	}
	return RejectReason_NoRejection
}

func (x *Execution) GetReportCause() ReportCause {
	if x != nil {
		return x.ReportCause
	}
	return ReportCause_NONE
}

func (x *Execution) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

func (x *Execution) GetExternalOrderId() string {
	if x != nil {
		return x.ExternalOrderId
	}
	return ""
}

func (x *Execution) GetExecutionEngineMarketId() int32 {
	if x != nil {
		return x.ExecutionEngineMarketId
	}
	return 0
}

func (x *Execution) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Execution) GetCancelReason() CancelReason {
	if x != nil {
		return x.CancelReason
	}
	return CancelReason_NotCancelled
}

func (x *Execution) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *Execution) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_GoodTillCancel
}

func (x *Execution) GetCancelledBy() string {
	if x != nil {
		return x.CancelledBy
	}
	return ""
}

var File_execution_proto protoreflect.FileDescriptor

var file_execution_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x06, 0x0a,
	0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x2a, 0x46, 0x0a, 0x0b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x03, 0x2a, 0x1e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x2a, 0xe0, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x64, 0x65, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x08,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x61,
	0x6c, 0x74, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x10, 0x0d, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6c, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10,
	0x11, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x13, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x14, 0x2a, 0x7b, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x2a, 0x48, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69,
	0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x10,
	0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_execution_proto_rawDescOnce sync.Once
	file_execution_proto_rawDescData = file_execution_proto_rawDesc
)

func file_execution_proto_rawDescGZIP() []byte {
	file_execution_proto_rawDescOnce.Do(func() {
		file_execution_proto_rawDescData = protoimpl.X.CompressGZIP(file_execution_proto_rawDescData)
	})
	return file_execution_proto_rawDescData
}

var file_execution_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_execution_proto_goTypes = []interface{}{
	(OrderStatus)(0),  // 0: main.OrderStatus
	(OrderType)(0),    // 1: main.OrderType
	(OrderSide)(0),    // 2: main.OrderSide
	(RejectReason)(0), // 3: main.RejectReason
	(ReportCause)(0),  // 4: main.ReportCause
	(TimeInForce)(0),  // 5: main.TimeInForce
	(CancelReason)(0), // 6: main.CancelReason
	(*TradeData)(nil), // 7: main.TradeData
	(*Execution)(nil), // 8: main.Execution
}
var file_execution_proto_depIdxs = []int32{
	0, // 0: main.TradeData.OrderStatus:type_name -> main.OrderStatus
	2, // 1: main.Execution.Side:type_name -> main.OrderSide
	0, // 2: main.Execution.OrderStatus:type_name -> main.OrderStatus
	7, // 3: main.Execution.Trades:type_name -> main.TradeData
	1, // 4: main.Execution.OrderType:type_name -> main.OrderType
	3, // 5: main.Execution.RejectReason:type_name -> main.RejectReason
	4, // 6: main.Execution.ReportCause:type_name -> main.ReportCause
	6, // 7: main.Execution.CancelReason:type_name -> main.CancelReason
	5, // 8: main.Execution.TimeInForce:type_name -> main.TimeInForce
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_execution_proto_init() }
func file_execution_proto_init() {
	if File_execution_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_execution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_execution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_execution_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_execution_proto_goTypes,
		DependencyIndexes: file_execution_proto_depIdxs,
		EnumInfos:         file_execution_proto_enumTypes,
		MessageInfos:      file_execution_proto_msgTypes,
	}.Build()
	File_execution_proto = out.File
	file_execution_proto_rawDesc = nil
	file_execution_proto_goTypes = nil
	file_execution_proto_depIdxs = nil
}
